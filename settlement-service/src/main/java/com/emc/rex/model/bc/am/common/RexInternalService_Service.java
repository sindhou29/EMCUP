package com.emc.rex.model.bc.am.common;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.apache.log4j.Logger;

import com.emc.settlement.common.UtilityFunctions;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.12.redhat-1
 * 2018-10-31T18:18:12.802+08:00
 * Generated source version: 3.1.12.redhat-1
 * 
 */
@WebServiceClient(name = "RexInternalService", 
                  wsdlLocation = "http://10.1.152.157:7504/rexservices/RexInternalService?wsdl",
                  targetNamespace = "/com/emc/rex/model/bc/am/common/") 
public class RexInternalService_Service extends Service {

	private static final Logger logger = Logger.getLogger(RexInternalService_Service.class);
    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("/com/emc/rex/model/bc/am/common/", "RexInternalService");
    public final static QName RexInternalServiceSoapHttpPort = new QName("/com/emc/rex/model/bc/am/common/", "RexInternalServiceSoapHttpPort");
    static {
        URL url = null;
        String rexServicesURL = null;
        try {
        	Map<String, String> propertiesMap = UtilityFunctions.getProperties();
        	rexServicesURL = propertiesMap.get("invrptservicesURL");
        	url = new URL(rexServicesURL+"/rexservices/RexInternalService?wsdl");
            //url = new URL("http://10.1.152.157:7504/rexservices/RexInternalService?wsdl");
        	logger.info("Rex Service URL : "+url);
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RexInternalService_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://10.1.152.157:7504/rexservices/RexInternalService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RexInternalService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RexInternalService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RexInternalService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public RexInternalService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public RexInternalService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public RexInternalService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns RexInternalService
     */
    @WebEndpoint(name = "RexInternalServiceSoapHttpPort")
    public RexInternalService getRexInternalServiceSoapHttpPort() {
        return super.getPort(RexInternalServiceSoapHttpPort, RexInternalService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RexInternalService
     */
    @WebEndpoint(name = "RexInternalServiceSoapHttpPort")
    public RexInternalService getRexInternalServiceSoapHttpPort(WebServiceFeature... features) {
        return super.getPort(RexInternalServiceSoapHttpPort, RexInternalService.class, features);
    }

}
