package com.emc.invoice.services.bc.am.common;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.apache.log4j.Logger;

import javax.xml.ws.Service;

import com.emc.settlement.common.UtilityFunctions;

/**
 * This class was generated by Apache CXF 3.1.12.redhat-1
 * 2018-07-26T14:50:31.226+08:00
 * Generated source version: 3.1.12.redhat-1
 * 
 */
@WebServiceClient(name = "InvInternalServices", 
                  wsdlLocation = "http://10.1.152.160:7504/invrptservices/InvInternalServices?WSDL",
                  targetNamespace = "/com/emc/invoice/services/bc/am/common/") 
public class InvInternalServices_Service extends Service {

	private static final Logger logger = Logger.getLogger(InvInternalServices_Service.class);
    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("/com/emc/invoice/services/bc/am/common/", "InvInternalServices");
    public final static QName InvInternalServicesSoapHttpPort = new QName("/com/emc/invoice/services/bc/am/common/", "InvInternalServicesSoapHttpPort");
    static {
        URL url = null;
        String invrptservicesURL = null;
        try {
        	 	Map<String, String> propertiesMap = UtilityFunctions.getProperties();
        	 	invrptservicesURL = propertiesMap.get("invrptservicesURL");
 		    	url = new URL(invrptservicesURL+"/invrptservices/InvInternalServices?WSDL");
 		    	logger.info("Invoice Service URL : " + invrptservicesURL+"/invrptservices/InvInternalServices?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(InvInternalServices_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", invrptservicesURL+"/invrptservices/InvInternalServices?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public InvInternalServices_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public InvInternalServices_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public InvInternalServices_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public InvInternalServices_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public InvInternalServices_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public InvInternalServices_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns InvInternalServices
     */
    @WebEndpoint(name = "InvInternalServicesSoapHttpPort")
    public InvInternalServices getInvInternalServicesSoapHttpPort() {
        return super.getPort(InvInternalServicesSoapHttpPort, InvInternalServices.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InvInternalServices
     */
    @WebEndpoint(name = "InvInternalServicesSoapHttpPort")
    public InvInternalServices getInvInternalServicesSoapHttpPort(WebServiceFeature... features) {
        return super.getPort(InvInternalServicesSoapHttpPort, InvInternalServices.class, features);
    }

}
